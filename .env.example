# ============================================================================
# Image Project Manager - Environment Configuration
# ============================================================================
# Copy this file to .env and configure for your environment
# All settings have sensible defaults for local development

# ============================================================================
# Application Settings
# ============================================================================

APP_NAME="Data Management API"
DEBUG=false
FAST_TEST_MODE=false
SKIP_HEADER_CHECK=false

# ============================================================================
# Authentication & Authorization
# ============================================================================

# Mock user settings (for development/testing when auth is disabled)
CHECK_MOCK_MEMBERSHIP=true
MOCK_USER_EMAIL="user@example.com"
MOCK_USER_GROUPS_JSON='["admin-group", "data-scientists", "project-alpha-group"]'

# Production authentication (reverse proxy header-based auth)
AUTH_SERVER_URL="https://your-auth-server.com"
PROXY_SHARED_SECRET=your-strong-random-secret-here
X_USER_ID_HEADER=X-User-Email
X_PROXY_SECRET_HEADER=X-Proxy-Secret

# ============================================================================
# Database Configuration
# ============================================================================

# PostgreSQL settings
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your-secure-db-password
POSTGRES_DB=datamanagement
POSTGRES_SERVER=localhost
POSTGRES_PORT=5433

# Database URL (constructed from above or set directly)
# Format: postgresql+asyncpg://user:password@host:port/database
DATABASE_URL=postgresql+asyncpg://postgres:your-secure-db-password@localhost:5433/datamanagement

# For Docker deployments, use service name:
# DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/datamanagement

# Host port mapping (when connecting from host to Docker container)
HOST_DB_PORT=5433

# ============================================================================
# Database Migrations (Alembic)
# ============================================================================

USE_ALEMBIC_MIGRATIONS=true

# ============================================================================
# S3/MinIO Object Storage
# ============================================================================

# S3/MinIO settings (preferred naming)
S3_ENDPOINT=localhost:9000
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadminpassword
S3_BUCKET=data-storage
S3_USE_SSL=false

# For AWS S3:
# S3_ENDPOINT=s3.amazonaws.com
# S3_ACCESS_KEY=your-aws-access-key
# S3_SECRET_KEY=your-aws-secret-key
# S3_BUCKET=your-data-bucket
# S3_USE_SSL=true

# Legacy MinIO settings (backward compatibility - use S3_* instead)
# MINIO_ENDPOINT=localhost:9000
# MINIO_ACCESS_KEY=minioadmin
# MINIO_SECRET_KEY=minioadminpassword
# MINIO_BUCKET_NAME=data-storage
# MINIO_USE_SSL=false

# ============================================================================
# Security Headers Configuration
# ============================================================================

SECURITY_NOSNIFF_ENABLED=true
SECURITY_XFO_ENABLED=true
SECURITY_XFO_VALUE=SAMEORIGIN
SECURITY_REFERRER_POLICY_ENABLED=true
SECURITY_REFERRER_POLICY_VALUE=no-referrer
SECURITY_CSP_ENABLED=true
SECURITY_CSP_VALUE="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';"

# ============================================================================
# Frontend Configuration
# ============================================================================

FRONTEND_BUILD_PATH=frontend/build

# CORS Origins (comma-separated, optional)
# CORS_ORIGINS=http://localhost:3000,https://your-domain.com

# ============================================================================
# Cache Configuration
# ============================================================================

# Cache size in megabytes
CACHE_SIZE_MB=1000

# ============================================================================
# ML Analysis Configuration
# ============================================================================

# Enable/disable ML analysis features
ML_ANALYSIS_ENABLED=true

# Maximum number of ML analyses allowed per image
ML_MAX_ANALYSES_PER_IMAGE=10

# Comma-separated list of allowed ML model names
ML_ALLOWED_MODELS=resnet50_classifier,vgg16,inception_v3,efficientnet_b0,demo-model-detcls,yolo_v8

# Default status for new analyses
ML_DEFAULT_STATUS=queued

# HMAC secret for ML pipeline authentication (REQUIRED for production)
# Generate with: openssl rand -hex 32
ML_CALLBACK_HMAC_SECRET=your-strong-hmac-secret-here

# Require HMAC authentication for ML pipeline endpoints
ML_PIPELINE_REQUIRE_HMAC=true

# Maximum annotations per bulk request
ML_MAX_BULK_ANNOTATIONS=5000

# Presigned URL expiry time (seconds)
ML_PRESIGNED_URL_EXPIRY_SECONDS=900

# ============================================================================
# Image Deletion & Retention Settings
# ============================================================================

# Soft delete retention window (days before hard delete)
IMAGE_DELETE_RETENTION_DAYS=60

# Minimum characters required for deletion reason
IMAGE_DELETE_REASON_MIN_CHARS=10

# Maximum images purged per background job cycle
IMAGE_DELETE_PURGE_BATCH_SIZE=500

# Background purge job interval (seconds)
IMAGE_DELETE_PURGE_INTERVAL_SECONDS=3600

# Enable/disable background purge task
ENABLE_IMAGE_PURGE=true

# ============================================================================
# Container/Docker Settings
# ============================================================================

# Set to '1' when running inside Docker container
# IN_DOCKER=1

# ============================================================================
# Development & Testing
# ============================================================================

# Generate source maps for React build (set to false for faster builds)
# GENERATE_SOURCEMAP=true

# Enable React Fast Refresh in development
# FAST_REFRESH=true

# Skip React preflight checks (useful for monorepo setups)
# SKIP_PREFLIGHT_CHECK=true

# ============================================================================
# Example Configurations
# ============================================================================

# --- Local Development ---
# Use defaults above with:
# - PostgreSQL on localhost:5433
# - MinIO on localhost:9000
# - Mock authentication
# - ML analysis enabled with test HMAC secret

# --- Docker Compose ---
# POSTGRES_SERVER=postgres
# DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/postgres
# S3_ENDPOINT=minio:9000
# DEBUG=true

# --- Kubernetes ---
# POSTGRES_SERVER=postgres-service
# POSTGRES_PORT=5432
# S3_ENDPOINT=minio-service:9000
# S3_USE_SSL=false
# PROXY_SHARED_SECRET=<from-k8s-secret>
# ML_CALLBACK_HMAC_SECRET=<from-k8s-secret>

# --- AWS Production ---
# DATABASE_URL=postgresql+asyncpg://user:pass@rds-endpoint:5432/db
# S3_ENDPOINT=s3.amazonaws.com
# S3_ACCESS_KEY=<aws-access-key>
# S3_SECRET_KEY=<aws-secret-key>
# S3_BUCKET=production-data-bucket
# S3_USE_SSL=true
# DEBUG=false
# PROXY_SHARED_SECRET=<strong-secret>
# ML_CALLBACK_HMAC_SECRET=<strong-secret>
# SECURITY_CSP_VALUE="<strict-csp-policy>"
