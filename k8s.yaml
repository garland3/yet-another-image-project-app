apiVersion: v1
kind: Namespace
metadata:
  name: data-mgmt
---
apiVersion: v1
kind: Secret
metadata:
  name: app-env-secret
  namespace: data-mgmt
stringData:
  APP_NAME: "Data Management API"
  SKIP_HEADER_CHECK: "True"
  MOCK_USER_EMAIL: "test@example.com"
  MOCK_USER_GROUPS: '["admin-group", "data-scientists", "project-alpha-group"]'
  POSTGRES_USER: "admin"
  POSTGRES_PASSWORD: "supersecretpassword"
  POSTGRES_DB: "datamgmt"
  POSTGRES_SERVER: "postgres"
  POSTGRES_PORT: "5432"
  DATABASE_URL: "postgresql+asyncpg://admin:supersecretpassword@postgres:5432/datamgmt"
  MINIO_ENDPOINT: "minio:9000"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadminpassword"
  MINIO_BUCKET_NAME: "data-storage"
  MINIO_USE_SSL: "False"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: data-mgmt
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: data-mgmt
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: data-mgmt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: app-env-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-env-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: app-env-secret
                  key: POSTGRES_DB
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "$(POSTGRES_USER)", "-d", "$(POSTGRES_DB)"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "$(POSTGRES_USER)", "-d", "$(POSTGRES_DB)"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: data-mgmt
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: data-mgmt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          args:
            - server
            - /data
            - --console-address
            - ":9090"
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: app-env-secret
                  key: MINIO_ACCESS_KEY
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-env-secret
                  key: MINIO_SECRET_KEY
          ports:
            - containerPort: 9000
            - containerPort: 9090
          volumeMounts:
            - name: minio-storage
              mountPath: /data
          readinessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: data-mgmt
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
    - port: 9090
      targetPort: 9090
  selector:
    app: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-app
  namespace: data-mgmt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fastapi-app
  template:
    metadata:
      labels:
        app: fastapi-app
    spec:
      containers:
        - name: fastapi-app
          image: quay.io/${QUAY_USERNAME}/yet-another-image-project-app:latest
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: app-env-secret
          readinessProbe:
            httpGet:
              path: /docs
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      imagePullSecrets:
        - name: quay-registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-app
  namespace: data-mgmt
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app: fastapi-app
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-app-nodeport
  namespace: data-mgmt
spec:
  type: NodePort
  ports:
    - port: 8000
      targetPort: 8000
      nodePort: 30807
  selector:
    app: fastapi-app
---
apiVersion: v1
kind: Service
metadata:
  name: minio-console-nodeport
  namespace: data-mgmt
spec:
  type: NodePort
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30909
  selector:
    app: minio
---
apiVersion: v1
kind: Secret
metadata:
  name: quay-registry-secret
  namespace: data-mgmt
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ${QUAY_REGISTRY_SECRET}
