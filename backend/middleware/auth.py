"""
Unified authentication middleware.
Single middleware for auth that extracts user info from headers and sets request state.
"""

import logging
import re
from fastapi import Request
from fastapi.responses import JSONResponse
from core.config import settings

logger = logging.getLogger(__name__)


def get_user_from_header(header_value: str) -> str | None:
    """
    Extract and validate user email from header.
    
    Args:
        header_value: Raw header value containing user email
        
    Returns:
        Cleaned user email or None if invalid
    """
    if not header_value:
        return None
    
    # Clean and normalize email
    email = header_value.strip().lower()
    
    # Basic email validation
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        return None
    
    return email


async def auth_middleware(request: Request, call_next):
    """
    Unified authentication middleware.
    Extracts user info from headers and sets request state based on config.
    """
    try:
        # Allow health check endpoint without authentication
        # Also allow FastAPI autogenerated documentation / schema routes
        if request.url.path == "/api/health" or \
           request.url.path == "/openapi.json" or \
           request.url.path.startswith("/docs") or \
           request.url.path.startswith("/redoc"):
            return await call_next(request)
        # Case-insensitive headers
        headers = {k.lower(): v for k, v in request.headers.items()}

        debug_mode = settings.DEBUG or settings.SKIP_HEADER_CHECK

        if debug_mode:
            logger.debug("Running in debug mode")
            user_header_value = (
                headers.get(settings.X_USER_ID_HEADER.lower())
                or headers.get("x-user-email")
            )
            if user_header_value:
                user_email = get_user_from_header(user_header_value)
                if user_email:
                    logger.debug(f"Debug mode: Using header user {user_email}")
                    request.state.user_email = user_email
                else:
                    logger.debug(
                        f"Debug mode: Invalid header email, using mock user {settings.MOCK_USER_EMAIL}"
                    )
                    request.state.user_email = settings.MOCK_USER_EMAIL
            else:
                logger.debug(
                    f"Debug mode: No header, using mock user {settings.MOCK_USER_EMAIL}"
                )
                request.state.user_email = settings.MOCK_USER_EMAIL
            request.state.is_authenticated = True
        else:
            logger.debug("Running in production mode")
            # Enforce proxy trust boundary - PROXY_SHARED_SECRET is required in production
            if not settings.PROXY_SHARED_SECRET:
                logger.error("PROXY_SHARED_SECRET must be set in production")
                return JSONResponse(
                    status_code=500,
                    content={"detail": "Server configuration error"},
                )
            
            proxy_secret = headers.get(settings.X_PROXY_SECRET_HEADER.lower())
            if proxy_secret != settings.PROXY_SHARED_SECRET:
                logger.warning("Invalid or missing proxy secret")
                return JSONResponse(
                    status_code=401,
                    content={"detail": "Invalid proxy authentication"},
                )

            user_header_value = headers.get(settings.X_USER_ID_HEADER.lower())
            user_email = get_user_from_header(user_header_value)
            if not user_email:
                logger.warning(
                    f"Missing or invalid {settings.X_USER_ID_HEADER} header"
                )
                return JSONResponse(
                    status_code=401,
                    content={
                        "detail": f"Missing or invalid {settings.X_USER_ID_HEADER} header"
                    },
                )

            # Do not replace request.state (no setter). Set attributes directly
            # and ensure no user_groups is present (server-side lookup only).
            if hasattr(request.state, "user_groups"):
                try:
                    delattr(request.state, "user_groups")
                except Exception:
                    # Fallback: null it out if deletion fails for any reason
                    try:
                        setattr(request.state, "user_groups", None)
                    except Exception as e:
                        # Log failure but continue - this shouldn't break auth flow
                        logger.warning("Failed to clear user_groups state attribute", extra={
                            "error": str(e),
                            "error_type": type(e).__name__
                        })

            request.state.user_email = user_email
            request.state.is_authenticated = True
            logger.debug(
                f"Groups will be looked up server-side for {user_email}"
            )

        response = await call_next(request)
        return response
    except Exception as e:
        logger.error(f"Authentication middleware error: {e}", exc_info=True)
        return JSONResponse(
            status_code=500, content={"detail": "Internal authentication error"}
        )


# Unauthenticated users should never make it to the backend and be rejected by the middleware.
# Code should just use request.state.user_email directly - no wrapper functions needed.