name: CI/CD Pipeline

# Define variables at the top
env:
  DOCKER_USERNAME: garland3
  DOCKER_IMAGE_NAME: yet-another-image-project-app
  PYTHON_VERSION: "3.11"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp ../.env.example .env || echo "No .env.example found, using defaults"
        
    - name: Run tests
      working-directory: ./backend
      run: |
        bash ../test/run_tests.sh
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
        POSTGRES_SERVER: localhost
        POSTGRES_PORT: 5432

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container
      run: |
        # Start the container
        docker run -d --name test-container \
          -e DATABASE_URL="sqlite:///./test.db" \
          -e FAST_TEST_MODE=true \
          -p 8000:8000 \
          ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/api/users/me || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container

    - name: Run tests in container
      run: |
        docker run --rm \
          -e DATABASE_URL="sqlite:///./test.db" \
          -e FAST_TEST_MODE=true \
          -e SKIP_HEADER_CHECK=true \
          ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest \
          bash -c "cd backend && bash ../test/run_tests.sh"

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max